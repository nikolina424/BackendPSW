// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PSWHospital.Models;

namespace PSWHospital.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PSWHospital.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FeedbackContent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowOnFront")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UsersFirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsersLastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FeedbackContent = "I love your website!",
                            PatientId = 2,
                            ShowOnFront = true,
                            UsersFirstName = "Dusan",
                            UsersLastName = "Sisarica"
                        },
                        new
                        {
                            Id = 2,
                            FeedbackContent = "My favourite doctor is Jovana Nikolic!",
                            PatientId = 1,
                            ShowOnFront = true,
                            UsersFirstName = "Marina",
                            UsersLastName = "Ivankovic"
                        });
                });

            modelBuilder.Entity("PSWHospital.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("PSWHospital.Models.Admin", b =>
                {
                    b.HasBaseType("PSWHospital.Models.User");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = 19,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "admin@gmail.com",
                            UserType = 0,
                            FirstName = "Nikolina",
                            LastName = "Ivankovic"
                        });
                });

            modelBuilder.Entity("PSWHospital.Models.Doctor", b =>
                {
                    b.HasBaseType("PSWHospital.Models.User");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DoctorType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnName("Doctor_FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnName("Doctor_LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Town")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "generalpractitioner1@gmail.com",
                            UserType = 2,
                            DoctorType = 0,
                            FirstName = "Dusan",
                            LastName = "Sisarica"
                        },
                        new
                        {
                            Id = 6,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "generalpractitioner2@gmail.com",
                            UserType = 2,
                            DoctorType = 0,
                            FirstName = "Dajana",
                            LastName = "Erceg"
                        },
                        new
                        {
                            Id = 7,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "generalpractitioner3@gmail.com",
                            UserType = 2,
                            DoctorType = 0,
                            FirstName = "Zorana",
                            LastName = "Vlaskalic"
                        },
                        new
                        {
                            Id = 8,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "generalpractitioner4@gmail.com",
                            UserType = 2,
                            DoctorType = 0,
                            FirstName = "Stefan",
                            LastName = "Simic"
                        },
                        new
                        {
                            Id = 9,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "generalpractitioner5@gmail.com",
                            UserType = 2,
                            DoctorType = 0,
                            FirstName = "Uros",
                            LastName = "Popovic"
                        },
                        new
                        {
                            Id = 10,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "neurologist1@gmail.com",
                            UserType = 2,
                            DoctorType = 2,
                            FirstName = "Jovan",
                            LastName = "Jenjic"
                        },
                        new
                        {
                            Id = 11,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "neurologist2@gmail.com",
                            UserType = 2,
                            DoctorType = 2,
                            FirstName = "Jana",
                            LastName = "Tatalovic"
                        },
                        new
                        {
                            Id = 12,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "neurologist3@gmail.com",
                            UserType = 2,
                            DoctorType = 2,
                            FirstName = "Nikola",
                            LastName = "Petrovic"
                        },
                        new
                        {
                            Id = 13,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "neurologist4@gmail.com",
                            UserType = 2,
                            DoctorType = 2,
                            FirstName = "Stefan",
                            LastName = "Stupar"
                        },
                        new
                        {
                            Id = 14,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "dermatologist1@gmail.com",
                            UserType = 2,
                            DoctorType = 1,
                            FirstName = "Marija",
                            LastName = "Jovanic"
                        },
                        new
                        {
                            Id = 15,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "dermatologist2@gmail.com",
                            UserType = 2,
                            DoctorType = 1,
                            FirstName = "Teodora",
                            LastName = "Milic"
                        },
                        new
                        {
                            Id = 16,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "dermatologist3@gmail.com",
                            UserType = 2,
                            DoctorType = 1,
                            FirstName = "Anastasja",
                            LastName = "Rinic"
                        },
                        new
                        {
                            Id = 17,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "dermatologist4@gmail.com",
                            UserType = 2,
                            DoctorType = 1,
                            FirstName = "Zoran",
                            LastName = "Kosic"
                        },
                        new
                        {
                            Id = 18,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "dermatologist5@gmail.com",
                            UserType = 2,
                            DoctorType = 1,
                            FirstName = "Ognjen",
                            LastName = "Markovic"
                        });
                });

            modelBuilder.Entity("PSWHospital.Models.Patient", b =>
                {
                    b.HasBaseType("PSWHospital.Models.User");

                    b.Property<string>("Address")
                        .HasColumnName("Patient_Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnName("Patient_FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("IdGeneralPractitioner")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnName("Patient_LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Town")
                        .HasColumnName("Patient_Town")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "patient1@gmail.com",
                            UserType = 1,
                            FirstName = "Jovana",
                            IdGeneralPractitioner = 5,
                            IsDeleted = false,
                            LastName = "Jovanic"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "patient2@gmail.com",
                            UserType = 1,
                            FirstName = "Ivana",
                            IdGeneralPractitioner = 6,
                            IsDeleted = false,
                            LastName = "Ivanic"
                        },
                        new
                        {
                            Id = 3,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "patient3@gmail.com",
                            UserType = 1,
                            FirstName = "Marko",
                            IdGeneralPractitioner = 7,
                            IsDeleted = false,
                            LastName = "Markovic"
                        },
                        new
                        {
                            Id = 4,
                            PasswordHash = new byte[] { 36, 209, 129, 114, 166, 117, 155, 65, 47, 36, 234, 227, 213, 70, 93, 124, 167, 193, 135, 79, 4, 55, 87, 111, 108, 109, 72, 145, 41, 248, 115, 130, 111, 84, 13, 211, 139, 44, 171, 113, 110, 180, 252, 157, 59, 69, 193, 37, 118, 82, 117, 113, 152, 245, 108, 6, 126, 138, 3, 229, 162, 89, 34, 246 },
                            PasswordSalt = new byte[] { 246, 248, 149, 166, 134, 209, 239, 137, 136, 101, 161, 50, 116, 66, 39, 148, 81, 34, 118, 87, 229, 251, 6, 1, 222, 27, 246, 136, 118, 61, 168, 232, 30, 8, 21, 4, 188, 188, 22, 12, 146, 70, 231, 134, 240, 82, 52, 26, 42, 235, 89, 78, 47, 77, 134, 50, 98, 19, 248, 59, 96, 155, 83, 225, 204, 176, 165, 164, 144, 156, 179, 147, 75, 224, 143, 79, 125, 242, 180, 86, 126, 39, 253, 167, 74, 148, 21, 27, 144, 162, 31, 243, 155, 174, 127, 131, 125, 19, 139, 250, 245, 3, 211, 126, 145, 237, 69, 142, 89, 50, 240, 232, 146, 219, 248, 78, 40, 85, 92, 133, 84, 62, 154, 120, 251, 40, 211, 33 },
                            UserName = "patient4@gmail.com",
                            UserType = 1,
                            FirstName = "Stefan",
                            IdGeneralPractitioner = 8,
                            IsDeleted = false,
                            LastName = "Stefanovic"
                        });
                });

            modelBuilder.Entity("PSWHospital.Models.Feedback", b =>
                {
                    b.HasOne("PSWHospital.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
