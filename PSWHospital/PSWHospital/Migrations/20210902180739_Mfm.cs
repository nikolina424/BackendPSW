using System;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace PSWHospital.Migrations
{
    public partial class Mfm : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    UserName = table.Column<string>(nullable: true),
                    PasswordHash = table.Column<byte[]>(nullable: true),
                    PasswordSalt = table.Column<byte[]>(nullable: true),
                    UserType = table.Column<int>(nullable: false),
                    Discriminator = table.Column<string>(nullable: false),
                    FirstName = table.Column<string>(nullable: true),
                    LastName = table.Column<string>(nullable: true),
                    Doctor_FirstName = table.Column<string>(nullable: true),
                    Doctor_LastName = table.Column<string>(nullable: true),
                    Address = table.Column<string>(nullable: true),
                    Town = table.Column<string>(nullable: true),
                    DoctorType = table.Column<int>(nullable: true),
                    Patient_FirstName = table.Column<string>(nullable: true),
                    Patient_LastName = table.Column<string>(nullable: true),
                    Patient_Address = table.Column<string>(nullable: true),
                    Patient_Town = table.Column<string>(nullable: true),
                    IdGeneralPractitioner = table.Column<int>(nullable: true),
                    IsDeleted = table.Column<bool>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "Discriminator", "PasswordHash", "PasswordSalt", "UserName", "UserType", "FirstName", "LastName" },
                values: new object[] { 19, "Admin", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "admin@gmail.com", 0, "Nikolina", "Ivankovic" });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "Discriminator", "PasswordHash", "PasswordSalt", "UserName", "UserType", "Patient_Address", "Patient_FirstName", "IdGeneralPractitioner", "IsDeleted", "Patient_LastName", "Patient_Town" },
                values: new object[,]
                {
                    { 2, "Patient", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "patient2@gmail.com", 1, null, "Ivana", 6, false, "Ivanic", null },
                    { 1, "Patient", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "patient1@gmail.com", 1, null, "Jovana", 5, false, "Jovanic", null }
                });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "Discriminator", "PasswordHash", "PasswordSalt", "UserName", "UserType", "Address", "DoctorType", "Doctor_FirstName", "Doctor_LastName", "Town" },
                values: new object[,]
                {
                    { 18, "Doctor", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "dermatologist5@gmail.com", 2, null, 1, "Ognjen", "Markovic", null },
                    { 17, "Doctor", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "dermatologist4@gmail.com", 2, null, 1, "Zoran", "Kosic", null },
                    { 16, "Doctor", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "dermatologist3@gmail.com", 2, null, 1, "Anastasja", "Rinic", null },
                    { 15, "Doctor", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "dermatologist2@gmail.com", 2, null, 1, "Teodora", "Milic", null },
                    { 14, "Doctor", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "dermatologist1@gmail.com", 2, null, 1, "Marija", "Jovanic", null }
                });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "Discriminator", "PasswordHash", "PasswordSalt", "UserName", "UserType", "Patient_Address", "Patient_FirstName", "IdGeneralPractitioner", "IsDeleted", "Patient_LastName", "Patient_Town" },
                values: new object[] { 3, "Patient", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "patient3@gmail.com", 1, null, "Marko", 7, false, "Markovic", null });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "Discriminator", "PasswordHash", "PasswordSalt", "UserName", "UserType", "Address", "DoctorType", "Doctor_FirstName", "Doctor_LastName", "Town" },
                values: new object[,]
                {
                    { 13, "Doctor", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "neurologist4@gmail.com", 2, null, 2, "Stefan", "Stupar", null },
                    { 11, "Doctor", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "neurologist2@gmail.com", 2, null, 2, "Jana", "Tatalovic", null },
                    { 10, "Doctor", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "neurologist1@gmail.com", 2, null, 2, "Jovan", "Jenjic", null },
                    { 9, "Doctor", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "generalpractitioner5@gmail.com", 2, null, 0, "Uros", "Popovic", null },
                    { 8, "Doctor", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "generalpractitioner4@gmail.com", 2, null, 0, "Stefan", "Simic", null },
                    { 7, "Doctor", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "generalpractitioner3@gmail.com", 2, null, 0, "Zorana", "Vlaskalic", null },
                    { 6, "Doctor", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "generalpractitioner2@gmail.com", 2, null, 0, "Dajana", "Erceg", null },
                    { 5, "Doctor", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "generalpractitioner1@gmail.com", 2, null, 0, "Dusan", "Sisarica", null },
                    { 12, "Doctor", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "neurologist3@gmail.com", 2, null, 2, "Nikola", "Petrovic", null }
                });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "Discriminator", "PasswordHash", "PasswordSalt", "UserName", "UserType", "Patient_Address", "Patient_FirstName", "IdGeneralPractitioner", "IsDeleted", "Patient_LastName", "Patient_Town" },
                values: new object[] { 4, "Patient", new byte[] { 96, 87, 132, 251, 242, 193, 29, 60, 70, 228, 77, 239, 32, 233, 69, 94, 167, 82, 118, 161, 236, 53, 33, 1, 180, 175, 8, 211, 72, 134, 8, 129, 193, 226, 93, 204, 47, 53, 39, 148, 122, 156, 224, 221, 197, 104, 68, 240, 124, 174, 176, 230, 124, 89, 166, 23, 212, 7, 26, 115, 124, 191, 166, 237 }, new byte[] { 101, 176, 126, 119, 210, 6, 122, 60, 170, 181, 14, 17, 91, 254, 193, 32, 234, 110, 134, 40, 138, 80, 206, 161, 190, 120, 254, 33, 244, 253, 119, 76, 125, 209, 242, 179, 34, 105, 187, 104, 139, 149, 123, 146, 136, 84, 33, 142, 18, 85, 27, 174, 38, 215, 100, 96, 161, 40, 122, 50, 253, 169, 46, 136, 5, 81, 82, 234, 11, 10, 0, 169, 137, 7, 252, 30, 205, 3, 184, 30, 159, 191, 196, 85, 235, 164, 57, 175, 36, 99, 171, 176, 245, 61, 102, 217, 162, 161, 238, 96, 108, 95, 238, 98, 123, 102, 195, 39, 52, 177, 171, 204, 214, 236, 136, 149, 23, 194, 27, 193, 158, 226, 41, 254, 0, 153, 5, 4 }, "patient4@gmail.com", 1, null, "Stefan", 8, false, "Stefanovic", null });
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Users");
        }
    }
}
